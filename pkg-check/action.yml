name: 'R package check'
description: 'Performs R CMD check for R package repositories'
inputs:
  pkg-path:
    description: 'path containing the DESCRIPTION file'
    required: false
    default: '.'
  debian-deps:
    description: 'list of system-level Debian/Ubuntu dependencies'
    required: false
    default: ''
  macos-deps:
    description: 'list of system-level macOS dependencies'
    required: false
    default: ''
  check-flags:
    description: 'additional flags to use in R CMD check'
    required: false
    default: ''
  build-script:
    description: 'build script to run in the repository instead of R CMD build. It must create the package tar ball one level up.'
    required: false
    default: ''
outputs:
  pkg-name:
    description: 'Package name'
    value: ${{ env.PACKAGE }}
runs:
  using: 'composite'
  steps:
    - name: Identify package
      run: |
        PACKAGE=$(sed -n 's/^Package: *//p' ${{ inputs.pkg-path }}/DESCRIPTION)
        echo " === Package $PACKAGE ==="
        echo "PACKAGE=$PACKAGE" >> $GITHUB_ENV
        if [ -z "$PACKAGE" ]; then echo "::error ::ERROR: invalid package, Package: entry not found"; exit 1; fi
      shell: bash

    - name: Build
      run: |
        echo "::group::Building $PACKAGE tar ball"
        R --version | head -n4
        SRCDIR="$(cd ${{ inputs.pkg-path }} && pwd)"
        BLDIR="$(cd $SRCDIR/.. && pwd)"
        BLCMD="${{ inputs.build-script }}"
        if [ -z "$BLCMD" ]; then 
          BLCMD="cd $BLDIR && R CMD build $SRCDIR"
        fi
        bash -c "$BLCMD"
        SRCTAR=`ls -d $BLDIR/${PACKAGE}_*tar.gz`
        if [ -z "$SRCTAR" ]; then echo "::error ::ERROR: cannot build package tar ball"; exit 1; fi
        ls -l $SRCTAR
        echo SRCTAR=$SRCTAR >> $GITHUB_ENV
        echo SRCDIR=$SRCDIR >> $GITHUB_ENV
        echo BLDIR=$BLDIR >> $GITHUB_ENV
        echo '::endgroup::'
      shell: bash

    - name: Install Linux dependencies
      run: |
        if [ "${{ runner.os }}" = Linux -a -n "${{ inputs.debian-deps }}" ]; then
          echo "::group::Install Linux system dependencies"
          sudo apt-get install -y ${{ inputs.debian-deps }}
          echo '::endgroup::'
        fi
      shell: bash

    - name: Install macOS dependencies
      run: |
        if [ "${{ runner.os }}" = macOS -a -n "${{ inputs.macos-deps }}" ]; then
          echo "::group::Install macOS system dependencies"
          for i in ${{ inputs.macos-deps }}; do
            echo -n "  $i"
            curl -s https://mac.r-project.org/libs-4/$i-darwin.17-x86_64.tar.gz | sudo tar fxz - --strip 2 -C /usr/local
          done
          echo ''
          echo '::endgroup::'
        fi
      shell: bash

    - name: Install package and dependencies
      run: |
        echo "::group::Install $PACKAGE and dependencies"
        mkdir -p $BLDIR/repo/src/contrib
        mkdir $BLDIR/Rlib
        SAFEDIR=$BLDIR
        cp $SRCTAR $BLDIR/repo/src/contrib
        REPOURL="file://$BLDIR/repo"
        if [ "${{ runner.os }}" = Linux ]; then
          PKGTYPE=source;
        else
          # This style of quoting does not work on windows-2022 runner:
          #   BRPATH=$BLDIR/repo`Rscript -e 'cat(contrib.url("",.Platform$pkgType))'`
          # The following one does (and it still works on ubuntu-20.04):
          BRPATH=$BLDIR/repo`Rscript -e 'cat(contrib.url('\'\'',.Platform$pkgType))'`
          echo Binary install - target repo is $BRPATH
          mkdir -p $BRPATH
          echo '' > $BRPATH/PACKAGES
          ls -l $BRPATH
          if [ "${{ runner.os }}" = Windows ]; then
            SAFEDIR=$(cd $BLDIR && Rscript -e 'cat(getwd())')
            REPOURL="file:$SAFEDIR/repo"
          fi
          PKGTYPE=both
        fi
        R_LIBS=$BLDIR/Rlib Rscript -e "\
          tools::write_PACKAGES('$SAFEDIR/repo/src/contrib',type='source'); \
          chooseCRANmirror(graphics=FALSE, ind=1, local.only=TRUE); \
          install.packages('$PACKAGE',,c('$REPOURL',getOption('repos')), type='$PKGTYPE', dependencies=TRUE) \
        "
        #FIXME: install.packages() above may have failed without affecting job status
        echo '::endgroup::'
      shell: bash

    - name: R CMD check
      run: |
        echo "::group::R CMD check"
        if ! pdflatex --version | head -n1; then echo "::warning ::pdflatex not found, using --no-manual"; XTRA=--no-manual; fi
        echo ''
        echo 'pkg-config is found at this location: '
        echo `which pkg-config`
        pkg-config --version
        pkg-config --libs libtiff-4
        R_LIBS=$BLDIR/Rlib Rscript -e 'Sys.which("pkg-config")'
        echo 'PATH is'
        echo $PATH
        Rscript -e 'system("pkg-config --libs libtiff-4")'
        Rscript -e 'system("uname -a")'
        echo "Testing from make..."
        echo -e 'all:\n\techo $(shell pkg-config --version) $(shell pkg-config --libs libtiff-4) $(shell uname -a)\n\tenv' > test.mk
        /usr/bin/make -f test.mk
        echo "Done testing from make (/usr/bin).."
        /c/msys64/usr/bin/make -f test.mk
        echo "Done testing from make (/c/msys64/usr/bin).."
        make --version        
        /usr/bin/make --version        
        /c/msys64/usr/bin/make --version
        which make
        where make
        R_LIBS=$BLDIR/Rlib Rscript -e 'Sys.getenv("PATH")'
        echo R_LIBS=$BLDIR/Rlib R CMD check ${{ inputs.check-flags }} $XTRA $SRCTAR
        cd $BLDIR
        if ! R_LIBS=$BLDIR/Rlib R CMD check ${{ inputs.check-flags }} $XTRA $SRCTAR ; then
          find $PACKAGE.Rcheck -name 00check.log -o -name 00install.out -o -name "*.fail" | \
            while read F ; do
              if [ -r $F ] ; then
                echo " -------------- $F --------------- "
                cat $F
               echo " --------------------------------- "
              fi
            done
            echo "::error ::ERROR: package $PACKAGE check failed"
            exit 1
        else
          echo "Packages $PACKAGE check passed"
        fi
        echo '::endgroup::'
      shell: bash
